#! /Applications/Nuke14.0v1/Nuke14.0v1.app/Contents/MacOS/libnuke-14.0.1.dylib -nx
#write_info Write1 file:"" format:"4096 2160 1" chans:":" framerange:"1 100" fps:"0" colorspace:"rec709" datatype:"unknown" transfer:"unknown" views:"main" colorManagement:"Nuke"
version 14.0 v1
define_window_layout_xml {<?xml version="1.0" encoding="UTF-8"?>
<layout version="1.0">
    <window x="129" y="25" w="3082" h="2107" screen="0">
        <splitter orientation="1">
            <split size="40"/>
            <dock id="" hideTitles="1" activePageId="Toolbar.1">
                <page id="Toolbar.1"/>
            </dock>
            <split size="2419" stretch="1"/>
            <splitter orientation="2">
                <split size="1225"/>
                <dock id="" activePageId="Viewer.1">
                    <page id="Viewer.1"/>
                </dock>
                <split size="862"/>
                <dock id="" activePageId="DAG.1" focus="true">
                    <page id="DAG.1"/>
                    <page id="Curve Editor.1"/>
                    <page id="DopeSheet.1"/>
                </dock>
            </splitter>
            <split size="615"/>
            <dock id="" activePageId="Properties.1">
                <page id="Properties.1"/>
                <page id="uk.co.thefoundry.backgroundrenderview.1"/>
                <page id="Scenegraph.1"/>
            </dock>
        </splitter>
    </window>
</layout>
}
Root {
inputs 0
name "/Volumes/panda/Dropbox (Personal)/_Library/nuke/_dev/backdrops/all_backs.nk"
fps 23.976
format "4096 2160 0 0 4096 2160 1 4K_DCP"
proxy_type scale
proxy_format "1024 778 0 0 1024 778 1 1K_Super_35(full-ap)"
render_mode top-down
colorManagement Nuke
workingSpaceLUT linear
monitorLut sRGB
monitorOutLUT rec709
int8Lut sRGB
int16Lut sRGB
logLut Cineon
floatLut linear
}
BackdropNode {
inputs 0
name BackdropNode1
tile_color 0xda718e00
label "<center><img src=\"CameraTracker.png\"> Camera Tracker"
note_font_size 30
xpos -129
ypos -283
bdwidth 281
bdheight 98
}
BackdropNode {
inputs 0
name BackdropNode10
tile_color 0x7f5f0001
label "<center><img src=\"Read.png\"> Elements"
note_font_size 30
xpos 349
ypos -37
bdwidth 182
bdheight 82
}
BackdropNode {
inputs 0
name BackdropNode11
tile_color 0x6f007f01
label "<center><img src=\":qrc/images/ToolbarFilter.png\"> FX"
note_font_size 30
xpos 555
ypos -44
bdwidth 171
bdheight 86
}
BackdropNode {
inputs 0
name BackdropNode12
tile_color 0x4c4c4c01
label "<center><img src=\"Grain.png\"> Grain"
note_font_size 30
xpos -125
ypos 55
bdwidth 198
bdheight 102
}
BackdropNode {
inputs 0
name BackdropNode13
tile_color 0x7f0001
label "<center><img src=\"Keyer.png\"> Key"
note_font_size 30
xpos 108
ypos 67
}
BackdropNode {
inputs 0
name BackdropNode14
tile_color 0x191901
label "<center><img src=\"Radial.png\"> Matte"
note_font_size 30
xpos 238
ypos 66
}
BackdropNode {
inputs 0
name BackdropNode15
tile_color 0x7f7b5201
label "<center><img src=\"Flare.png\"> Lens Flare"
note_font_size 30
xpos 377
ypos 73
}
BackdropNode {
inputs 0
name BackdropNode16
tile_color 0x5e5f0001
label "<center><img src=\"Write.png\"> Output"
note_font_size 30
xpos 712
ypos 161
bdwidth 110
bdheight 160
}
BackdropNode {
inputs 0
name BackdropNode17
tile_color 0x4b4b4b01
label "<center><img src=\"SideBySide.png\"> References"
note_font_size 30
xpos -123
ypos -478
bdwidth 110
bdheight 160
}
BackdropNode {
inputs 0
name BackdropNode18
tile_color 0x37613701
label "<center><img src=\"Roto.png\"> Roto"
note_font_size 30
xpos 720
ypos -6
}
BackdropNode {
inputs 0
name BackdropNode19
tile_color 0x513b5301
label "<center><img src=\"2D.png\"> Transformations"
note_font_size 30
xpos 495
ypos 75
}
BackdropNode {
inputs 0
name BackdropNode2
tile_color 0x60353501
label "<center><img src=\"MarkerRemoval.png\"> Rig Removal"
note_font_size 30
xpos 164
ypos -281
bdwidth 412
bdheight 104
}
BackdropNode {
inputs 0
name BackdropNode20
tile_color 0x7f7f7f01
label "<center><img src=\"SpotLight.png\"> Light Setup"
note_font_size 30
xpos 916
ypos -265
bdwidth 110
bdheight 160
}
BackdropNode {
inputs 0
name BackdropNode21
tile_color 0x7f305b01
label "<center><img src=\"LightWrap.png\"> Light Wrap"
note_font_size 30
xpos -131
ypos 180
bdwidth 110
bdheight 160
}
BackdropNode {
inputs 0
name BackdropNode22
tile_color 0x4c4c4c01
label "<center><img src=\"Viewer.png\"> Previous Versions"
note_font_size 30
xpos 1062
ypos -274
bdwidth 165
bdheight 113
}
BackdropNode {
inputs 0
name BackdropNode23
tile_color 0x4b4b4b01
label "<center><img src=\"Merge.png\"> Resources"
note_font_size 30
xpos 1241
ypos -273
bdwidth 172
bdheight 114
}
BackdropNode {
inputs 0
name BackdropNode24
tile_color 0x657f0001
label "<center><img src=\"Reformat.png\"> Set Extension"
note_font_size 30
xpos 946
ypos -71
bdwidth 222
bdheight 171
}
BackdropNode {
inputs 0
name BackdropNode3
tile_color 0x7f01
label "<center><img src=\"Card.png\"> Camera Projection"
note_font_size 30
xpos -132
ypos -173
bdwidth 204
bdheight 87
}
BackdropNode {
inputs 0
name BackdropNode4
tile_color 0x7f000001
label "<center><img src=\"Camera.png\"> Camera Setup"
note_font_size 30
xpos -128
ypos -66
bdwidth 198
bdheight 93
}
BackdropNode {
inputs 0
name BackdropNode5
tile_color 0x36615401
label "<center><img src=\"DustBust.png\"> Cleanup"
note_font_size 30
xpos 91
ypos -162
bdwidth 132
bdheight 104
}
BackdropNode {
inputs 0
name BackdropNode6
tile_color 0x3f004c01
label "<center><img src=\"LevelSet.png\"> Controllers"
note_font_size 30
xpos 297
ypos -168
bdwidth 171
bdheight 111
}
BackdropNode {
inputs 0
name BackdropNode7
tile_color 0x3c547f01
label "<center><img src=\"ColorLookup.png\"> Color Correction"
note_font_size 30
xpos 107
ypos -50
bdwidth 211
bdheight 101
}
BackdropNode {
inputs 0
name BackdropNode8
tile_color 0x423c7f01
label "<center><img src=\"HueCorrect.png\"> Despill"
note_font_size 30
xpos 587
ypos -278
bdwidth 161
bdheight 93
}
BackdropNode {
inputs 0
name BackdropNode9
tile_color 0x677f5201
label "<center><img src=\"EdgeDetect.png\"> Edge Fixes"
note_font_size 30
xpos 502
ypos -167
bdwidth 173
bdheight 103
}
Viewer {
inputs 0
frame 1
frame_range 1-100
fps 23.97602463
monitorOutOutputTransform rec709
name Viewer1
xpos -378
ypos -408
}
ColorPicker.gizmo {
inputs 0
name ColorPicker1
label "\[python \{nuke.thisNode()\['o_hex'].getValue() if nuke.thisNode()\['o_errorMsg'].value() == \" \" else \"Error\"\}]"
note_font Verdana
xpos -288
ypos -222
current_tile_color 512819199
w_hex 0x347FFFF
w_int 55050239
w_python_example "nuke.selectedNode()\['tile_color'].setValue(55050239)"
o_hex #1E90FF
o_text_test "You can enter any text you want to test ~•.•~"
o_html_example "<span style='color:#1E90FF'>You can enter any text you want to test ~•.•~</span>"
format 0
}
Read {
inputs 0
file_type png
file "/Volumes/panda/Dropbox (Personal)/_Library/nuke/_dev/itaki_tools/i_icons/itaki.png"
format "256 256 0 0 256 256 1 square_256"
origset true
name Read1
xpos -1063
ypos -263
addUserKnob {20 User}
addUserKnob {26 names l "Create shuffle nodes from all layers"}
addUserKnob {22 setShuffle l "Create Shuffle nodes" -STARTLINE T "\{newNode()\}"}
addUserKnob {26 name l "Select the layers needed to create shuffle nodes"}
addUserKnob {22 selLayer l "Select your Layers" -STARTLINE T "\{mylayerPanel()\}"}
}
Transform {
inputs 0
center {2048 1080}
name Transform1
xpos -1004
ypos -169
}
Tracker4 {
center {2048 1080}
name Tracker1
xpos -1004
ypos -112
addUserKnob {20 button +HIDDEN +INVISIBLE}
addUserKnob {22 createPPinUseCurrentFrameBaked -STARTLINE T "import aePowerPinFun\naePowerPinFun.createPPinUseReferenceFrameBaked()"}
addUserKnob {22 createPPinUseReferenceFrameBaked -STARTLINE T "import aePowerPinFun\naePowerPinFun.createPPinUseReferenceFrameBaked()"}
}
ReadGeo2 {
inputs 0
name ReadGeo1
xpos -797
ypos -162
}
OFXcom.absoft.neatvideo5_v5 {
inputs 0
DNP ""
ProfileName "no profile"
NFP ""
PresetName default
ParamsHash1 0
ParamsHash2 0
ParamsHash3 0
name "Reduce Noise v5_1"
xpos -1069
ypos 5
}
CameraTracker {
inputs 0
serializeKnob "22 serialization::archive 19 0 4 0 2 0 0 0 0 0 0 0 0 0 0 0 0 -1 0 0 0 1 0 0 0 0 1 0 0 0 0 1 0 0 0 0 1 1 0 0 0 0 1 0 0 0 0 1 0 0 0 0 1 0 0 1 0 0 0 0 0 0 0 0 0 0 0"
trackStart 1
trackStop 100
filenameSalt 1075806162
new3D true
userTrackViews {left right}
name CameraTracker1
xpos -995
ypos 16
}
GeoCard {
inputs 0
control_points {3 3 3 6 

1 {-0.5 -0.263671875 0} 0 {0.1666666865 0 0} 0 {0 0 0} 0 {0 0.0878906399 0} 0 {0 0 0} 0 {0 0 0} 
1 {0 -0.263671875 0} 0 {0.1666666716 0 0} 0 {-0.1666666716 0 0} 0 {0 0.0878906399 0} 0 {0 0 0} 0 {0.5 0 0} 
1 {0.5 -0.263671875 0} 0 {0 0 0} 0 {-0.1666666865 0 0} 0 {0 0.0878906399 0} 0 {0 0 0} 0 {1 0 0} 
1 {-0.5 0 0} 0 {0.1666666865 0 0} 0 {0 0 0} 0 {0 0.087890625 0} 0 {0 -0.087890625 0} 0 {0 0.5 0} 
1 {0 0 0} 0 {0.1666666716 0 0} 0 {-0.1666666716 0 0} 0 {0 0.087890625 0} 0 {0 -0.087890625 0} 0 {0.5 0.5 0} 
1 {0.5 0 0} 0 {0 0 0} 0 {-0.1666666865 0 0} 0 {0 0.087890625 0} 0 {0 -0.087890625 0} 0 {1 0.5 0} 
1 {-0.5 0.263671875 0} 0 {0.1666666865 0 0} 0 {0 0 0} 0 {0 0 0} 0 {0 -0.0878906399 0} 0 {0 1 0} 
1 {0 0.263671875 0} 0 {0.1666666716 0 0} 0 {-0.1666666716 0 0} 0 {0 0 0} 0 {0 -0.0878906399 0} 0 {0.5 1 0} 
1 {0.5 0.263671875 0} 0 {0 0 0} 0 {-0.1666666865 0 0} 0 {0 0 0} 0 {0 -0.0878906399 0} 0 {1 1 0} }
name GeoCard1
xpos -739
ypos -131
}
Grade {
inputs 0
name Grade1
xpos -889
ypos -32
}
HueCorrect {
name HueCorrect1
xpos -889
ypos -8
}
Defocus {
name Defocus1
xpos -889
ypos 16
}
GodRays {
inputs 0
name GodRays1
xpos -677
ypos -10
}
Convolve2 {
name Convolve1
xpos -677
ypos 22
}
Glow2 {
name Glow1
xpos -677
ypos 54
}
Inpaint2 {
center {2048 1080}
name Inpaint1
xpos -677
ypos 78
}
Merge2 {
name Merge1
xpos -677
ypos 102
}
Group {
name reconcile3DPro
tile_color 0xc43c00ff
xpos -677
ypos 126
addUserKnob {20 User}
addUserKnob {22 axisFromSelection l "Create Axis From Selection" t "Automatcially create axis points with positioning based on selected vertex in the viewer." -STARTLINE T "import nuke\nimport nukescripts\nfrom nukescripts import snap3d\nimport math\n\n\nthisNode = nuke.thisNode()\n\ndef getConnectedPoints(thisNode):\n    # get points input node\n    inputParent = thisNode.input(1)\n    \n    axisPoints = \[]\n    #check something is plugged in\n    if not inputParent:\n        return axisPoints\n    \n    if inputParent.Class() == 'Axis2' or inputParent.Class() == 'Axis':\n        axisPoints = \[inputParent]\n    else:  \n        # get nodes plugged into scene\n        inputParentDeps = inputParent.dependencies()\n        # filter out any deps that aren't axis nodes\n        def isAxisNode(node):\n            return node.Class() == \"Axis2\" or node.Class() == \"Axis\"\n        \n        axisPoints = filter(isAxisNode, inputParentDeps)\n        \n    return axisPoints\n\n\ndef axisFromSelection():\n    thisNode.end()\n    thisNode\['selected'].setValue(False)\n    x = thisNode\['xpos'].getValue()    \n    y = thisNode\['ypos'].getValue()\n\n    vertices = snap3d.selectedPoints()\n    verticesInfo = snap3d.selectedVertexInfos()\n\n    \n    vPoints= \[]\n    \n    #get pre existing points\n    axisPoints = getConnectedPoints(thisNode)\n\n    if len(axisPoints) > 0:\n        #delete pre existing points (will be re-added again later on)\n        for a in axisPoints:\n            pos = a\['translate'].getValue()\n            #convert to vector3\n            vector3 = nuke.math.Vector3(pos\[0],pos\[1],pos\[2])\n            #now add axis points position to vPoints\n            vPoints.append(vector3)\n            #delete axis\n            nuke.delete(a) \n            #delete anything left connected directly to input\n            if thisNode.input(1):\n                nuke.delete(thisNode.input(1))\n\n    \n    for v in verticesInfo:\n        if v.position in vPoints:\n            print 'position already found, removing duplicate.'\n        else:\n            vPoints.append(v.position)\n            \n            #check for no points\n    if len(vPoints) < 1:\n        nuke.message('Please select at least one vertex in the 3D Viewer')\n        return\n        \n    print vPoints\n            \n      \n    aNodes = \[]    \n    for i, v in enumerate(vPoints):\n        a = nuke.createNode('Axis2', inpanel = False)\n        a\['translate'].setValue(v)\n        a\['selected'].setValue(False)\n        a\['ypos'].setValue(y-154-10)\n        a\['xpos'].setValue(x+230 + (i*110))\n        aNodes.append(a)\n    \n\n    #create mergeGeo\n    m = nuke.nodes.MergeGeo()\n    m\['ypos'].setValue(y)\n    m\['xpos'].setValue(x+230 -10)\n    #connect to reconcile3DPro\n    thisNode.setInput(1, m)\n    #connect axis points to mergeGeo\n    for i, a in enumerate(aNodes):\n        m.setInput(i,a)\n\n\naxisFromSelection()\n"}
addUserKnob {22 trackPoints l "Track Axis Points!" t "This is where the magic happens and the axis 3D points are converted to 2D tracks. If anything changes this will need to be run again to see the updates." -STARTLINE T "import nuke\nimport nukescripts\n\n\nthisNode = nuke.thisNode()\n\nthisNode.begin()\n\ndef convertPoints(points, camera):\n    #about if no camera\n    if camera.Class() != \"Camera\" and camera.Class() != \"Camera2\":\n        return nuke.message('Please connect a camera!')\n    #abort if no axis points\n    if len(points) < 1:\n        return nuke.message('Please connect at least one axis to points. For one axis connect dirrectly, for multiple connect using a scene node.')   \n         \n    print \"camera and points valid\"\n    \n    axisList = points\n    recList = \[]\n    cam = camera        \n\n    # Creates Reconcile3D for every axis and renders it with the root framerange\n    for axis in axisList:\n        recList.append( nuke.nodes.Reconcile3D(inputs= \[None, cam, axis]) )\n    first = int( nuke.root()\['first_frame'].value() )\n    last = int( nuke.root()\['last_frame'].value() )\n    frameList = \[\[first, last, 1]]\n    print 'Reconciling %s Axis nodes for frames %s - %s' %(len(axisList), first, last)\n    nuke.executeMultiple(recList, frameList)\n    \n    # For each axis node selected, makes a track\n    # Sets transform to matchmove and use_for for each to \"TR\"\n    trk = nuke.toNode('axisTracker')\n    trk\['selected'].setValue(True)\n    trk\['xpos'].setValue(cam.xpos()+100)\n    trk\['ypos'].setValue(cam.ypos()+100)\n    trk\['reference_frame'].setValue(nuke.frame())\n    \n    # Hooks up and deletes each reconcile3D node to tracker\n    for i, rec in enumerate(recList):\n        outputX = rec\['output'].animation(0)\n        outputY = rec\['output'].animation(1)\n        numColumns = 31 \n\n        trk\['add_track'].execute()\n        # track_x    (2)\n        for key in outputX.keys():\n            trk\['tracks'].setValueAt(key.y, key.x, numColumns*i + 2)\n        # track_y    (3)\n        for key in outputY.keys():\n            trk\['tracks'].setValueAt(key.y, key.x, numColumns*i + 3)\n        # Translate  (6)\n        trk\['tracks'].setValue(1.0, numColumns*i + 6)\n        # Rotate     (7)\n        trk\['tracks'].setValue(1.0, numColumns*i + 7)\n        # Scale      (8)\n        trk\['tracks'].setValue(1.0, numColumns*i + 8)\n        \n        nuke.delete(rec)\n    # Force update tracker\n    trk\['transform'].setFlag(0)\n    trk\['transform'].setValue('match-move')\n    trk\['transform'].setValue('none')\n    \n#get camera\ncameraParent = thisNode.input(0)\ntopnode_name = nuke.tcl(\"full_name \[topnode %s]\" % thisNode.name())\ncamera = nuke.toNode(topnode_name)\n\ndef getConnectedPoints(thisNode):\n    # get points input node\n    inputParent = thisNode.input(1)\n    #check something is plugged in\n    if not inputParent:\n        nuke.message('Please connect some points')\n        return\n    \n    axisPoints = \[]\n    \n    if inputParent.Class() == 'Axis2' or inputParent.Class() == 'Axis':\n        axisPoints = \[inputParent]\n    else:  \n        # get nodes plugged into scene\n        inputParentDeps = inputParent.dependencies()\n        # filter out any deps that aren't axis nodes\n        def isAxisNode(node):\n            return node.Class() == \"Axis2\" or node.Class() == \"Axis\"\n        \n        axisPoints = filter(isAxisNode, inputParentDeps)\n        \n    return axisPoints\n\naxisPoints = getConnectedPoints(thisNode)\n\n# try to convert points\ntry:\n    convertPoints(axisPoints, camera)\nexcept:\n    e = sys.exc_info()\[0]\n    print e"}
addUserKnob {26 axis_tracks l "Axis Tracks"}
addUserKnob {41 tracks l "" -STARTLINE T axisTracker.tracks}
addUserKnob {41 add_track l "add track" T axisTracker.add_track}
addUserKnob {41 del_tracks l "delete tracks" -STARTLINE T axisTracker.del_tracks}
addUserKnob {26 "" l <b>Export</b>}
addUserKnob {22 trackerExport l "Export Tracker" T "group = nuke.thisNode()\ngroup.begin()\nnuke.toNode('axisTracker')\['selected'].setValue(True)\nnuke.nodeCopy(\"%clipboard%\")\ngroup.end()\ntrackerCopy = nuke.nodePaste(\"%clipboard%\")" +STARTLINE}
addUserKnob {20 transform l Transform}
addUserKnob {41 reference_frame l "reference frame" T axisTracker.reference_frame}
addUserKnob {41 translate T axisTracker.translate}
addUserKnob {41 rotate T axisTracker.rotate}
addUserKnob {41 scale T axisTracker.scale}
addUserKnob {41 center T axisTracker.center}
addUserKnob {20 tips l Tips}
addUserKnob {26 tipsText l "" +STARTLINE T "<html>\n<style>\nli \{\n    margin-top: 10px;\n\}\ndiv \{\n    color: grey;\n\}\n</style>\n<h2>Setup Method 1 (auto)</h2>\n<ul>\n    <li>Select a vertex point in the 3D viewer and click 'Create Axis From Selection'.</li>\n    <li>Select another one to add more, you can just keep adding them</li>\n    <li>Select multiple ones all at once to create them all in one go</li>\n    <li>Everything should have automatically linked up, with the positions on the axis already added</li>\n    <li>Go to the tracking step if everything is working!</li>\n</ul>\n\n\n<h2>Setup Method 2 (manual)</h2>\n<ul>\n<li>Connect all your axis points (that have the correct 3D position) to one mergeGeo node.</li>\n<li>Connect \"points\" input to the mergeGeo node.</li>\n<li>For one axis point you can connect it directly to the \"points\" input.</li>\n<li>Trackers will be created in the order of how the mergeGeo axis nodes are connected: <br/>1 will be the first tract etc. </li>\n</ul>\n\n\n<h2>Tracking</h2>\n\n\n<ul>\n<li>Once everything is connected click \"Track Axis Points!\" and the tracks will be calculated.</li>\n<li>To update or redo the tracks it's best to delete any current tracks<br/>and click \"Track Axis Points!\" again.</li>\n</ul>\n\n\n<div>\nCredits<br/>\nLuke Inderwick 2021\n</div>\n</html>"}
}
Input {
inputs 0
name points
xpos 510
ypos 182
number 1
}
Input {
inputs 0
name footage
xpos 290
ypos 374
number 2
}
Output {
name Output1
xpos 290
ypos 470
}
Input {
inputs 0
name camera
xpos 290
ypos 182
}
Tracker4 {
cornerPinOptions "CornerPin2D (use transform ref frame, baked)"
center {320 240}
name axisTracker
selected true
xpos 70
ypos -362
addUserKnob {20 button +HIDDEN +INVISIBLE}
addUserKnob {22 createPPinUseCurrentFrameBaked -STARTLINE T "import aePowerPinFun\naePowerPinFun.createPPinUseReferenceFrameBaked()"}
addUserKnob {22 createPPinUseReferenceFrameBaked -STARTLINE T "import aePowerPinFun\naePowerPinFun.createPPinUseReferenceFrameBaked()"}
}
end_group
ParticleEmitter {
name ParticleEmitter1
xpos -423
ypos 12
}
DeepColorCorrect2 {
inputs 0
name DeepColorCorrect1
xpos -381
ypos 43
}
OFXcom.borisfx.ofx.mochapro_v1 {
inputs 0
views Mono
swap_views false
stereo_output Left
Matte 0
view_matte_mattegroupid false
apply_matte_mattegroupid false
visible_layers_mattegroupid "All Visible"
feather_mattegroupid 0
invert_matte_mattegroupid false
"Module Renders" 0
render_modulerendersgroupid false
module_modulerendersgroupid "Lens: Undistort"
warp_quality_modulerendersgroupid Normal
insert_blend_mode_modulerendersgroupid Default
insert_blend_opacity_modulerendersgroupid 1
view_modulerendersgroupid Custom
vr_lens_latitude_modulerendersgroupid 0
vr_lens_longitude_modulerendersgroupid 0
vr_lens_fov_modulerendersgroupid 120
premultiply_output Auto
"License and Registration" 0
requiredExtraFramesValue true
mochaprivatedata1 ""
mochaprivatedata2 ""
name "Mocha Pro1"
xpos -338
ypos 34
}
Write {
inputs 0
channels rgba
colorspace rec709
file_type mov
mov64_codec appr
mov_prores_codec_profile "ProRes 4:4:4:4 XQ 12-bit"
mov_h264_codec_profile "High 4:2:0 8-bit"
mov64_pixel_format {{0}}
mov64_quality High
mov64_fast_start true
mov64_write_timecode true
mov64_gop_size 12
mov64_b_frames 0
mov64_bitrate 20000
mov64_bitrate_tolerance 4000000
mov64_quality_min 1
mov64_quality_max 3
checkHashOnRead false
name Write1
xpos -1149
ypos 119
}
Roto {
inputs 0
output alpha
curves {{{v x3f99999a}
  {f 0}
  {n
   {layer Root
    {f 0}
    {t x45000000 x44870000}
    {a pt1x 0 pt1y 0 pt2x 0 pt2y 0 pt3x 0 pt3y 0 pt4x 0 pt4y 0 ptex00 0 ptex01 0 ptex02 0 ptex03 0 ptex10 0 ptex11 0 ptex12 0 ptex13 0 ptex20 0 ptex21 0 ptex22 0 ptex23 0 ptex30 0 ptex31 0 ptex32 0 ptex33 0 ptof1x 0 ptof1y 0 ptof2x 0 ptof2y 0 ptof3x 0 ptof3y 0 ptof4x 0 ptof4y 0 pterr 0 ptrefset 0 ptmot x40800000 ptref 0}}}}}
toolbox {createBezier {
  { createBezier str 1 ssx 1 ssy 1 sf 1 sb 1 tt 4 }
  { createBezierCusped str 1 ssx 1 ssy 1 sf 1 sb 1 }
  { createBSpline str 1 ssx 1 ssy 1 sf 1 sb 1 }
  { createEllipse str 1 ssx 1 ssy 1 sf 1 sb 1 }
  { createRectangle str 1 ssx 1 ssy 1 sf 1 sb 1 }
  { createRectangleCusped str 1 ssx 1 ssy 1 sf 1 sb 1 }
  { brush str 1 ssx 1 ssy 1 sf 1 sb 1 }
  { eraser src 2 str 1 ssx 1 ssy 1 sf 1 sb 1 }
  { clone src 1 str 1 ssx 1 ssy 1 sf 1 sb 1 }
  { reveal src 3 str 1 ssx 1 ssy 1 sf 1 sb 1 }
  { dodge src 1 str 1 ssx 1 ssy 1 sf 1 sb 1 }
  { burn src 1 str 1 ssx 1 ssy 1 sf 1 sb 1 }
  { blur src 1 str 1 ssx 1 ssy 1 sf 1 sb 1 }
  { sharpen src 1 str 1 ssx 1 ssy 1 sf 1 sb 1 }
  { smear src 1 str 1 ssx 1 ssy 1 sf 1 sb 1 }
} }
toolbar_brush_hardness 0.200000003
toolbar_source_transform_scale {1 1}
toolbar_source_transform_center {2048 1080}
name Roto1
xpos -964
ypos 160
addUserKnob {20 button +HIDDEN +INVISIBLE}
addUserKnob {22 createPowerRelative -STARTLINE T "import aePowerPinFun\naePowerPinFun.createPowerRelative()"}
addUserKnob {22 createPowerAbsolute -STARTLINE T "import aePowerPinFun\naePowerPinFun.createPowerAbsolute()"}
addUserKnob {22 createPowerStabilize -STARTLINE T "import aePowerPinFun\naePowerPinFun.createPowerStabilize()"}
}
Keyer {
inputs 0
operation "luminance key"
name Keyer1
xpos -774
ypos 197
}
Group {
inputs 0
name ____tempcopyknobgroup__
xpos -609
ypos -158
}
end_group
GodRays {
inputs 0
name GodRays2
xpos 771
ypos -383
}
